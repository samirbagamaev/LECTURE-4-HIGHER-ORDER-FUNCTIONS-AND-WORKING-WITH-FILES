#ВСПОМНИМ ОБЫЧНЫЕ ФУНКЦИИ

def f(x):  #вызвали функцию 
    return x * x
print(f(5)) #ОТВЕТ: 25 


#.........................................................................


#ЧТОБЫ УЗНАТЬ КЛАСС 

def f(x):  
    return x * x
print(type(f)) #ОТВЕТ: <class 'function'>

#ИЛИ

def f(x):  
    return x * x

a = f 
print(type(a)) #ОТВЕТ: <class 'function'>

#если ввести любое число, то результат не измениться


#.........................................................................


#ПОПРОБУЕМ СОЗДАТЬ НЕБОЛЬШОЙ КАЛЬКУЛЯТОР 

def calk1(a):
    return a + a

def calk2(a):
    return a * a

def math(op, x):
    print(op(x))

math(calk1, 5)   #ОТВЕТ: 10 
math(calk2, 5)   #ОТВЕТ: 25



#ИЛИ


def calk1(a, b):
    return a + b

def calk2(a, b):
    return a * b

def math(op, x, y):
    print(op(x, y))

math(calk1, 5, 45)   #ОТВЕТ: 50
math(calk2, 5, 45)   #ОТВЕТ: 225



######################################################################

#LAMBDA - ФУНКЦИИ

def calk2(a, b):
    return a * b

def math(op, x, y):
    print(op(x, y))

#----------------------------------------------------------    
def calk1(a,b):   #вот эту функцию мы преобразовали       #   
    return a + b                                          #
                                                          #
calk1 = lambda  a,b: a + b #в эту функцию, уменьшили её   #
#----------------------------------------------------------     

math(calk1, 5, 45)   #ОТВЕТ: 50



#ИЛИ МОЖНО ТАК

def calk2(a, b):
    return a * b

def math(op, x, y):
    print(op(x, y))

math(lambda  a,b: a + b, 5, 45) #ОТВЕТ: 50


#.........................................................................


# Задача для самостоятельного решения
# 1. В списке хранятся числа. Нужно выбрать 
# только чётные числа и составить список пар
# (число; квадрат числа).

# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]

data = [1, 2, 3, 5, 8, 15, 23, 38]
res = list()

for i in data:
    if i % 2 == 0: #делится на 2 без остатка, то есть элемент четный
        res.append((i, i**2))

print(res)     #ОТВЕТ: [(2, 4), (8, 64), (38, 1444)]




#А ТЕПЕРЬ ПОПРОБУЕМ СДЕЛАТЬ ЭТОТ КОД ЛУЧШЕ, ИСПОЛЬЗУЮ LAMBDA - ФУНКЦИЮ


#ПЕРВАЯ ФУНКЦИЯ ВОЗВРАЩАЕТ СПИСОК В КОТОРОМ МЫ К КАЖДОМУ ЭЛЕМЕНТУ ПРИМЕНИЛИ ФУНКЦИЮ f
def select(f, col):
    return [f(x) for x in col] 

# #А ВТОРАЯ ФУНКЦИЯ БУДЕТ ВОЗВРАЩАТЬ ТОЛЬКО ТЕ ЗНАЧЕНИЯ КОТРЫЕ ПРОШЛИ ПРОВЕРКУ УСЛОВИЯ f(x)
def where(f, col):
    return[x for x in col if f(x)]

data = [1, 2, 3, 5, 8, 15, 23, 38]

res = select(int, data) #привели к целочисленному типу наш список data
print(res)

res = where(lambda x: x % 2 == 0, res)
print(res)

res = list(select(lambda x: (x, x ** 2), res))
print(res)

#ОТВЕТ:
# [1, 2, 3, 5, 8, 15, 23, 38]
# [2, 8, 38]
# [(2, 4), (8, 64), (38, 1444)]



######################################################################

#ФУНКЦИЯ MAP

# Функция map() применяет указанную функцию к каждому элементу итерируемого объекта и
# возвращает итератор с новыми объектами.

# Есть набор данных. Функция map позволяет увеличить каждый объект на 10.

list_1 = [ x for x in range(1, 20)]
print(list_1)

list_1 = list(map(lambda x: x + 10, list_1))
print(list_1)

#ОТВЕТ:
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
# [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]



#.........................................................................

#РЕШИМ НЕБОЛЬШУЮ ЗАДАЧКУ

# Задача: C клавиатуры вводится некий набор чисел,
# в качестве разделителя используется
# пробел. Этот набор чисел будет считан в качестве строки.
# Как превратить list строк в list чисел?

data = '15 156 96 3 5 8 52 5'

data = list(map(int, data.split()))
print(data) #ОТВЕТ: [15, 156, 96, 3, 5, 8, 52, 5]





#map() позволит избавиться от функции select.


def where(f, col):
 return [x for x in col if f(x)]
data = '1 2 3 5 8 15 23 38'.split()
res = map(int, data)
res = where(lambda x: x % 2 == 0, res)
res = list(map(lambda x: (x, x ** 2), res))
print(res)  #ОТВЕТ: [(2, 4), (8, 64), (38, 1444)]




######################################################################

#ФУНКЦИЯ filter

# Функция filter() применяет указанную функцию к каждому элементу итерируемого объекта и
# возвращает итератор с теми объектами, для которых функция вернула True.


#БУДЕМ ВЫВОДИТЬ ТЕ ЧИСЛА, КОТОРЫЕ ЗАКАНЧИВАЮТСЯ НА 5

data = [15, 65, 9, 36, 175]
res = list(filter(lambda x: x % 10 == 5, data))
print(res) #ОТВЕТ: [15, 65, 175]



# Как можно сделать этот код лучше, используя filter()?
# filter() позволит избавиться от функции where, которую мы писали ранее

data = '1 2 3 5 8 15 23 38'.split()

res = map(int, data)
res = filter(lambda x: x % 2 == 0, res)
res = list(map(lambda x: (x, x ** 2), res))

print(res) #ОТВЕТ: [(2, 4), (8, 64), (38, 1444)]




######################################################################

#ФУНКЦИЯ zip

# Функция zip() применяется к набору итерируемых объектов и возвращает
# итератор с кортежами из элементов входных данных


# zip ([1, 2, 3], [ 'о' , 'д', 'т'], ['f' , 's' , 't'] )

# [(1, 'о', 'f'), () 2 , 'д', 's'), (3 , 'т' , 't') ]


#Пример:

users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
data = list(zip(users, ids))
print(data)
#ОТВЕТ: [('user1', 4), ('user2', 5), ('user3', 9), ('user4', 14), ('user5', 7)]



#Функция zip () пробегает по минимальному входящему набору:

users = ['user1', 'user2', 'user3', 'user4', 'user5']
ids = [4, 5, 9, 14, 7]
salary = [111, 222, 333]
data = list(zip(users, ids, salary))
print(data) #ОТВЕТ: [('user1', 4, 111), ('user2', 5, 222), ('user3', 333)]



######################################################################

#ФУНКЦИЯ enumerate

# Функция enumerate() применяется к итерируемому объекту и возвращает новый итератор с
# кортежами из индекса и элементов входных данных.

# enumerate(['Казань' , 'Смоленск' , 'Рыбки' , 'Чикаго'])

# [(0, 'Казань') , [(1, 'Смолениск') , [(2, 'Рыбки') , [(3, 'Чикаго') ]




# Функция enumerate() позволяет пронумеровать набор данных.


users = ['user1', 'user2', 'user3']
data = list(enumerate(users)
print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]




######################################################################

#ФАЙЛЫ


# Файлы в текстовом формате используются для:

# ● Хранения данных
# ● Передачи данных в клиент-серверных проектах
# ● Хранения конфигов
# ● Логирования действий


# Что нужно для работы с файлами:

# 1. Завести переменную, которая будет связана с этим текстовым файлом.
# 2. Указать путь к файлу.
# 3. Указать, в каком режиме мы будем работать с файлом.




# Варианты режима (мод):

# a – открытие для добавления данных.

# -Позволяет дописывать что-то в имеющийся файл.

# -Если вы попробуете дописать что-то в несуществующий файл, то файл будет создан
# и в него начнется запись.



# r – открытие для чтения данных.

# -Позволяет читать данные из файла.

# -Если вы попробуете считать данные из файла, которого не существует, программа
# выдаст ошибку.



# w – открытие для записи данных.
# -Позволяет записывать данные и создавать файл, если его не существует.




# Миксованные режимы:
# 1. w+

# ○ Позволяет открывать файл для записи и читать из него.
# ○ Если файла не существует, он будет создан.


# 2. r+

# ○ Позволяет открывать файл для чтения и дописывать в него.
# ○ Если файла не существует, программа выдаст ошибку. 



#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# 3. Режим w

 colors = ['red', 'green', 'blue']
 data = open('file.txt', 'w') #здесь указываем режим, в котором будем работать
 data.writelines(colors) # разделителей не будет
data.close()

# ● В итоге создаётся текстовый файл с текстом внутри: ‘redbluedreen’.
# ● В случае перезаписи новые данные записываются, а старые удаляются.


#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# Ещё один способ записи данных в файл:

with open('file.txt', 'w') as data:
 data.write('line 1\n')
 data.write('line 2\n')


#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# 2. Режим r

# ● Чтение данных из файла:

 path = 'file.txt'
 data = open(path, 'r')
 for line in data:
 print(line)
 data.close()

#ОТВЕТ:
#line 1
#line 3

#И ТАКОЙ-ЖЕ ОТВЕТ В НОВОМ ФАЙЛЕ 




######################################################################

#МОДУЛЬ os


# Модуль os предоставляет множество функций для работы с операционной системой, причем их
# поведение, как правило, не зависит от ОС, поэтому программы остаются переносимыми.

# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою
# программу:

import os

# Познакомимся с базовыми функциями данного модуля:


# ● os.chdir(path) - смена текущей директории.

import os

os.chdir('C:/Users/79190/PycharmProjects/GB')


# #---------------------------------------------------------------


# ● os.getcwd() - текущая рабочая директория

import os

print(os.getcwd()) # 'C:\Users\79190\PycharmProjects\webproject'


#---------------------------------------------------------------



# ● os.path - является вложенным модулем в модуль os и реализует некоторые полезные функции для работы с
# путями, такие как:

# ○ os.path.basename(path) - базовое имя пути

import os

print(os.path.basename('C:/Users/79190/PycharmProjects/webproject/main.py')) #'main.py'


# #---------------------------------------------------------------


# ● os.path.abspath(path) - возвращает нормализованный абсолютный путь.

import os

print(os.path.abspath('main.py')) # 'C:/Users/79190/PycharmProjects/webproject/main.py'



# Это лишь малая часть возможностей модуля os.





######################################################################

#МОДУЛЬ shutil


# Модуль shutil содержит набор функций высокого уровня для обработки файлов, групп файлов, и папок. В частности,
# доступные здесь функции позволяют копировать, перемещать и удалять файлы и папки. Часто используется вместе
# с модулем os.

# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою программу:
# import shutil

# Познакомимся с базовыми функциями данного модуля:

# ● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в файл dst.
# ● shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst.
# ● shutil.rmtree(path) - Удаляет текущую директорию и все поддиректории; path должен указывать на
# директорию, а не на символическую ссылку.





######################################################################


# Итоги:

# ● Изучали функции высшего порядка, такие как:
# ○ map
# ○ filter
# ○ zip
# ○ lambda
# ○ enumerate
# ● Научили работать с файлами
# ● Изучили библиотеки для работы с операционной системой и файлами